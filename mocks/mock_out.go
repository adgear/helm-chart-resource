// Code generated by MockGen. DO NOT EDIT.
// Source: actions/out.go

// Package mocks is a generated GoMock package.
package mocks

import (
	utils "github.com/adgear/helm-chart-resource/utils"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOutResource is a mock of OutResource interface
type MockOutResource struct {
	ctrl     *gomock.Controller
	recorder *MockOutResourceMockRecorder
}

// MockOutResourceMockRecorder is the mock recorder for MockOutResource
type MockOutResourceMockRecorder struct {
	mock *MockOutResource
}

// NewMockOutResource creates a new mock instance
func NewMockOutResource(ctrl *gomock.Controller) *MockOutResource {
	mock := &MockOutResource{ctrl: ctrl}
	mock.recorder = &MockOutResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOutResource) EXPECT() *MockOutResourceMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockOutResource) Execute(input utils.Input, sourcePath, tmpdir string) (string, error) {
	ret := m.ctrl.Call(m, "Execute", input, sourcePath, tmpdir)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockOutResourceMockRecorder) Execute(input, sourcePath, tmpdir interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockOutResource)(nil).Execute), input, sourcePath, tmpdir)
}
