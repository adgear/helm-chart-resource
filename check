#!/bin/bash

set -e              # Willexit immediate if command exits with non-zero status
set -u              # Will print message if variable not set,
set -o pipefail     # Fail on a pipline like cmd1 | cmd2 | cmd3, rather then wait
# set -x

exec 3>&1           # Make stdout available as fd 3 for the result
exec 1>&2           # Redirect all output to stderr for logging

source $(dirname $0)/common.sh

payload=$TMPDIR/helm-chart-resource
cat > $payload <&0

setuprepo

debug=$(jq -cr '.source.debug // 0' <  $payload)

if [[ "$debug" -eq "1" ]]; then
  set -x
fi

chart_name=$(jq -cr .source.chart_name < $payload)
repository_name=$(jq -cr .source.repository_name < $payload)

if [[ $chart_name == "" ]]; then
  echo "No bruh!"
  exit 1
fi

json_output=""

while read -r line; do
  version=$(echo $line | awk '{print $2};')
  app_version=$(echo $line | awk '{print $3};')
  description=$(echo $line | awk '{{for (i=4; i<NF; i++) printf $i " "; print $NF}};')

  metadata="{app_version: \"${app_version}\", description: \"${description}\"}"

  # json_output="${json_output} {ref: \"${version}\", metadata: ${metadata}},"
  json_output="${json_output} {ref: \"${version}\"},"
done < <(helm search $repository_name/$chart_name -l | grep -v "No results found" | grep -v "NAME" | sort -nr | head -n1)

json_output="[${json_output}]"

json_output=$(sed 's/,]/]/g' <<<$json_output)

jq -n "$json_output" >&3